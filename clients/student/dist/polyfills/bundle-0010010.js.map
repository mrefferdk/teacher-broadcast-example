{"version":3,"file":"polyfills/bundle-0010010.js","sources":["webpack:////Users/andreas/frontend/dev-tools/yakintos/node_modules/polyfill-library/polyfills/__dist/_ESAbstract.CreateMethodProperty/raw.js","webpack:////Users/andreas/frontend/dev-tools/yakintos/node_modules/polyfill-library/polyfills/__dist/_ESAbstract.ToObject/raw.js","webpack:////Users/andreas/frontend/dev-tools/yakintos/node_modules/polyfill-library/polyfills/__dist/_ESAbstract.ToLength/raw.js","webpack:////Users/andreas/frontend/dev-tools/yakintos/node_modules/polyfill-library/polyfills/__dist/_ESAbstract.Get/raw.js","webpack:////Users/andreas/frontend/dev-tools/yakintos/node_modules/polyfill-library/polyfills/__dist/_ESAbstract.ToInteger/raw.js","webpack:////Users/andreas/frontend/dev-tools/yakintos/node_modules/polyfill-library/polyfills/__dist/_ESAbstract.SameValueZero/raw.js","webpack:////Users/andreas/frontend/dev-tools/yakintos/node_modules/polyfill-library/polyfills/__dist/_ESAbstract.ToString/raw.js","webpack:////Users/andreas/frontend/dev-tools/yakintos/node_modules/polyfill-library/polyfills/__dist/_ESAbstract.SameValueNonNumber/raw.js","webpack:////Users/andreas/frontend/dev-tools/yakintos/node_modules/polyfill-library/polyfills/__dist/_ESAbstract.Type/raw.js","webpack:////Users/andreas/frontend/dev-tools/yakintos/node_modules/polyfill-library/polyfills/__dist/_ESAbstract.ToPrimitive/raw.js","webpack:////Users/andreas/frontend/dev-tools/yakintos/node_modules/polyfill-library/polyfills/__dist/_ESAbstract.Call/raw.js","webpack:////Users/andreas/frontend/dev-tools/yakintos/node_modules/polyfill-library/polyfills/__dist/_ESAbstract.GetMethod/raw.js","webpack:////Users/andreas/frontend/dev-tools/yakintos/node_modules/polyfill-library/polyfills/__dist/_ESAbstract.OrdinaryToPrimitive/raw.js","webpack:////Users/andreas/frontend/dev-tools/yakintos/node_modules/polyfill-library/polyfills/__dist/_ESAbstract.GetV/raw.js","webpack:////Users/andreas/frontend/dev-tools/yakintos/node_modules/polyfill-library/polyfills/__dist/_ESAbstract.IsCallable/raw.js","webpack:////Users/andreas/frontend/dev-tools/yakintos/node_modules/polyfill-library/polyfills/__dist/Promise/raw.js","webpack:////Users/andreas/frontend/dev-tools/yakintos/node_modules/polyfill-library/polyfills/__dist/Array.prototype.includes/raw.js"],"sourcesContent":["\n// _ESAbstract.CreateMethodProperty\n// 7.3.5. CreateMethodProperty ( O, P, V )\nfunction CreateMethodProperty(O, P, V) { // eslint-disable-line no-unused-vars\n\t// 1. Assert: Type(O) is Object.\n\t// 2. Assert: IsPropertyKey(P) is true.\n\t// 3. Let newDesc be the PropertyDescriptor{[[Value]]: V, [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true}.\n\tvar newDesc = {\n\t\tvalue: V,\n\t\twritable: true,\n\t\tenumerable: false,\n\t\tconfigurable: true\n\t};\n\t// 4. Return ? O.[[DefineOwnProperty]](P, newDesc).\n\tObject.defineProperty(O, P, newDesc);\n}","\n// _ESAbstract.ToObject\n// 7.1.13 ToObject ( argument )\n// The abstract operation ToObject converts argument to a value of type Object according to Table 12:\n// Table 12: ToObject Conversions\n/*\n|----------------------------------------------------------------------------------------------------------------------------------------------------|\n| Argument Type | Result                                                                                                                             |\n|----------------------------------------------------------------------------------------------------------------------------------------------------|\n| Undefined     | Throw a TypeError exception.                                                                                                       |\n| Null          | Throw a TypeError exception.                                                                                                       |\n| Boolean       | Return a new Boolean object whose [[BooleanData]] internal slot is set to argument. See 19.3 for a description of Boolean objects. |\n| Number        | Return a new Number object whose [[NumberData]] internal slot is set to argument. See 20.1 for a description of Number objects.    |\n| String        | Return a new String object whose [[StringData]] internal slot is set to argument. See 21.1 for a description of String objects.    |\n| Symbol        | Return a new Symbol object whose [[SymbolData]] internal slot is set to argument. See 19.4 for a description of Symbol objects.    |\n| Object        | Return argument.                                                                                                                   |\n|----------------------------------------------------------------------------------------------------------------------------------------------------|\n*/\nfunction ToObject(argument) { // eslint-disable-line no-unused-vars\n\tif (argument === null || argument === undefined) {\n\t\tthrow TypeError();\n\t}\n  return Object(argument);\n}","\n// _ESAbstract.ToLength\n/* global ToInteger */\n// 7.1.15. ToLength ( argument )\nfunction ToLength(argument) { // eslint-disable-line no-unused-vars\n\t// 1. Let len be ? ToInteger(argument).\n\tvar len = ToInteger(argument);\n\t// 2. If len ≤ +0, return +0.\n\tif (len <= 0) {\n\t\treturn 0;\n\t}\n\t// 3. Return min(len, 253-1).\n\treturn Math.min(len, Math.pow(2, 53) -1);\n}","\n// _ESAbstract.Get\n// 7.3.1. Get ( O, P )\nfunction Get(O, P) { // eslint-disable-line no-unused-vars\n\t// 1. Assert: Type(O) is Object.\n\t// 2. Assert: IsPropertyKey(P) is true.\n\t// 3. Return ? O.[[Get]](P, O).\n\treturn O[P];\n}","\n// _ESAbstract.ToInteger\n// 7.1.4. ToInteger ( argument )\nfunction ToInteger(argument) { // eslint-disable-line no-unused-vars\n\t// 1. Let number be ? ToNumber(argument).\n\tvar number = Number(argument);\n\t// 2. If number is NaN, return +0.\n\tif (isNaN(number)) {\n\t\treturn 0;\n\t}\n\t// 3. If number is +0, -0, +∞, or -∞, return number.\n\tif (number === 0 || number === -0 || number === Infinity || number === -Infinity) {\n\t\treturn number;\n\t}\n\t// 4. Return the number value that is the same sign as number and whose magnitude is floor(abs(number)).\n\treturn ((number < 0) ? -1 : 1) * Math.floor(Math.abs(number));\n}","\n// _ESAbstract.SameValueZero\n/* global Type, SameValueNonNumber */\n// 7.2.11. SameValueZero ( x, y )\nfunction SameValueZero (x, y) { // eslint-disable-line no-unused-vars\n\t// 1. If Type(x) is different from Type(y), return false.\n\tif (Type(x) !== Type(y)) {\n\t\treturn false;\n\t}\n\t// 2. If Type(x) is Number, then\n\tif (Type(x) === 'number') {\n\t\t// a. If x is NaN and y is NaN, return true.\n\t\tif (isNaN(x) && isNaN(y)) {\n\t\t\treturn true;\n\t\t}\n\t\t// b. If x is +0 and y is -0, return true.\n\t\tif (1/x === Infinity && 1/y === -Infinity) {\n\t\t\treturn true;\n\t\t}\n\t\t// c. If x is -0 and y is +0, return true.\n\t\tif (1/x === -Infinity && 1/y === Infinity) {\n\t\t\treturn true;\n\t\t}\n\t\t// d. If x is the same Number value as y, return true.\n\t\tif (x === y) {\n\t\t\treturn true;\n\t\t}\n\t\t// e. Return false.\n\t\treturn false;\n\t}\n\t// 3. Return SameValueNonNumber(x, y).\n\treturn SameValueNonNumber(x, y);\n};","\n// _ESAbstract.ToString\n/* global Type, ToPrimitive */\n// 7.1.12. ToString ( argument )\n// The abstract operation ToString converts argument to a value of type String according to Table 11:\n// Table 11: ToString Conversions\n/*\n|---------------|--------------------------------------------------------|\n| Argument Type | Result                                                 |\n|---------------|--------------------------------------------------------|\n| Undefined     | Return \"undefined\".                                    |\n|---------------|--------------------------------------------------------|\n| Null\t        | Return \"null\".                                         |\n|---------------|--------------------------------------------------------|\n| Boolean       | If argument is true, return \"true\".                    |\n|               | If argument is false, return \"false\".                  |\n|---------------|--------------------------------------------------------|\n| Number        | Return NumberToString(argument).                       |\n|---------------|--------------------------------------------------------|\n| String        | Return argument.                                       |\n|---------------|--------------------------------------------------------|\n| Symbol        | Throw a TypeError exception.                           |\n|---------------|--------------------------------------------------------|\n| Object        | Apply the following steps:                             |\n|               | Let primValue be ? ToPrimitive(argument, hint String). |\n|               | Return ? ToString(primValue).                          |\n|---------------|--------------------------------------------------------|\n*/\nfunction ToString(argument) { // eslint-disable-line no-unused-vars\n\tswitch(Type(argument)) {\n\t\tcase 'symbol':\n\t\t\tthrow new TypeError('Cannot convert a Symbol value to a string');\n\t\t\tbreak;\n\t\tcase 'object':\n\t\t\tvar primValue = ToPrimitive(argument, 'string');\n\t\t\treturn ToString(primValue);\n\t\tdefault:\n\t\t\treturn String(argument);\n\t}\n}","\n// _ESAbstract.SameValueNonNumber\n// 7.2.12. SameValueNonNumber ( x, y )\nfunction SameValueNonNumber(x, y) { // eslint-disable-line no-unused-vars\n\t// 1. Assert: Type(x) is not Number.\n\t// 2. Assert: Type(x) is the same as Type(y).\n\t// 3. If Type(x) is Undefined, return true.\n\t// 4. If Type(x) is Null, return true.\n\t// 5. If Type(x) is String, then\n\t\t// a. If x and y are exactly the same sequence of code units (same length and same code units at corresponding indices), return true; otherwise, return false.\n\t// 6. If Type(x) is Boolean, then\n\t\t// a. If x and y are both true or both false, return true; otherwise, return false.\n\t// 7. If Type(x) is Symbol, then\n\t\t// a. If x and y are both the same Symbol value, return true; otherwise, return false.\n\t// 8. If x and y are the same Object value, return true. Otherwise, return false.\n\n\t// Polyfill.io - We can skip all above steps because the === operator does it all for us.\n\treturn x === y;\n}","\n// _ESAbstract.Type\n// \"Type(x)\" is used as shorthand for \"the type of x\"...\nfunction Type(x) { // eslint-disable-line no-unused-vars\n\tswitch (typeof x) {\n\t\tcase 'undefined':\n\t\t\treturn 'undefined';\n\t\tcase 'boolean':\n\t\t\treturn 'boolean';\n\t\tcase 'number':\n\t\t\treturn 'number';\n\t\tcase 'string':\n\t\t\treturn 'string';\n\t\tcase 'symbol':\n\t\t\treturn 'symbol';\n\t\tdefault:\n\t\t\t// typeof null is 'object'\n\t\t\tif (x === null) return 'null';\n\t\t\t// Polyfill.io - This is here because a Symbol polyfill will have a typeof `object`.\n\t\t\tif ('Symbol' in this && x instanceof this.Symbol) return 'symbol';\n\t\t\treturn 'object';\n\t}\n}","\n// _ESAbstract.ToPrimitive\n/* global Type, GetMethod, Symbol, Call, OrdinaryToPrimitive */\n// 7.1.1. ToPrimitive ( input [ , PreferredType ] )\nfunction ToPrimitive(input /* [, PreferredType] */) { // eslint-disable-line no-unused-vars\n\tvar PreferredType = arguments.length > 1 ? arguments[1] : undefined;\n\t// 1. Assert: input is an ECMAScript language value.\n\t// 2. If Type(input) is Object, then\n\tif (Type(input) === 'object') {\n\t\t// a. If PreferredType is not present, let hint be \"default\".\n\t\tif (arguments.length < 2) {\n\t\t\tvar hint = 'default';\n\t\t\t// b. Else if PreferredType is hint String, let hint be \"string\".\n\t\t} else if (PreferredType === String) {\n\t\t\thint = 'string';\n\t\t\t// c. Else PreferredType is hint Number, let hint be \"number\".\n\t\t} else if (PreferredType === Number) {\n\t\t\thint = 'number';\n\t\t}\n\t\t// d. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).\n\t\tvar exoticToPrim = typeof this.Symbol === 'function' && typeof this.Symbol.toPrimitive === 'symbol' ? GetMethod(input, this.Symbol.toPrimitive) : undefined;\n\t\t// e. If exoticToPrim is not undefined, then\n\t\tif (exoticToPrim !== undefined) {\n\t\t\t// i. Let result be ? Call(exoticToPrim, input, « hint »).\n\t\t\tvar result = Call(exoticToPrim, input, [hint]);\n\t\t\t// ii. If Type(result) is not Object, return result.\n\t\t\tif (Type(result) !== 'object') {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t// iii. Throw a TypeError exception.\n\t\t\tthrow new TypeError('Cannot convert exotic object to primitive.');\n\t\t}\n\t\t// f. If hint is \"default\", set hint to \"number\".\n\t\tif (hint === 'default') {\n\t\t\thint = 'number';\n\t\t}\n\t\t// g. Return ? OrdinaryToPrimitive(input, hint).\n\t\treturn OrdinaryToPrimitive(input, hint);\n\t}\n\t// 3. Return input\n\treturn input;\n}","\n// _ESAbstract.Call\n/* global IsCallable */\n// 7.3.12. Call ( F, V [ , argumentsList ] )\nfunction Call(F, V /* [, argumentsList] */) { // eslint-disable-line no-unused-vars\n\t// 1. If argumentsList is not present, set argumentsList to a new empty List.\n\tvar argumentsList = arguments.length > 2 ? arguments[2] : [];\n\t// 2. If IsCallable(F) is false, throw a TypeError exception.\n\tif (IsCallable(F) === false) {\n\t\tthrow new TypeError(Object.prototype.toString.call(F) + 'is not a function.');\n\t}\n\t// 3. Return ? F.[[Call]](V, argumentsList).\n\treturn F.apply(V, argumentsList);\n}","\n// _ESAbstract.GetMethod\n/* global GetV, IsCallable */\n// 7.3.9. GetMethod ( V, P )\nfunction GetMethod(V, P) { // eslint-disable-line no-unused-vars\n\t// 1. Assert: IsPropertyKey(P) is true.\n\t// 2. Let func be ? GetV(V, P).\n\tvar func = GetV(V, P);\n\t// 3. If func is either undefined or null, return undefined.\n\tif (func === null || func === undefined) {\n\t\treturn undefined;\n\t}\n\t// 4. If IsCallable(func) is false, throw a TypeError exception.\n\tif (IsCallable(func) === false) {\n\t\tthrow new TypeError('Method not callable: ' + P);\n\t}\n\t// 5. Return func.\n\treturn func;\n}","\n// _ESAbstract.OrdinaryToPrimitive\n/* global Get, IsCallable, Call, Type */\n// 7.1.1.1. OrdinaryToPrimitive ( O, hint )\nfunction OrdinaryToPrimitive(O, hint) { // eslint-disable-line no-unused-vars\n\t// 1. Assert: Type(O) is Object.\n\t// 2. Assert: Type(hint) is String and its value is either \"string\" or \"number\".\n\t// 3. If hint is \"string\", then\n\tif (hint === 'string') {\n\t\t// a. Let methodNames be « \"toString\", \"valueOf\" ».\n\t\tvar methodNames = ['toString', 'valueOf'];\n\t\t// 4. Else,\n\t} else {\n\t\t// a. Let methodNames be « \"valueOf\", \"toString\" ».\n\t\tmethodNames = ['valueOf', 'toString'];\n\t}\n\t// 5. For each name in methodNames in List order, do\n\tfor (var i = 0; i < methodNames.length; ++i) {\n\t\tvar name = methodNames[i];\n\t\t// a. Let method be ? Get(O, name).\n\t\tvar method = Get(O, name);\n\t\t// b. If IsCallable(method) is true, then\n\t\tif (IsCallable(method)) {\n\t\t\t// i. Let result be ? Call(method, O).\n\t\t\tvar result = Call(method, O);\n\t\t\t// ii. If Type(result) is not Object, return result.\n\t\t\tif (Type(result) !== 'object') {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t}\n\t// 6. Throw a TypeError exception.\n\tthrow new TypeError('Cannot convert to primitive.');\n}","\n// _ESAbstract.GetV\n/* global ToObject */\n// 7.3.2 GetV (V, P)\nfunction GetV(v, p) { // eslint-disable-line no-unused-vars\n\t// 1. Assert: IsPropertyKey(P) is true.\n\t// 2. Let O be ? ToObject(V).\n\tvar o = ToObject(v);\n\t// 3. Return ? O.[[Get]](P, V).\n\treturn o[p];\n}","\n// _ESAbstract.IsCallable\n// 7.2.3. IsCallable ( argument )\nfunction IsCallable(argument) { // eslint-disable-line no-unused-vars\n\t// 1. If Type(argument) is not Object, return false.\n\t// 2. If argument has a [[Call]] internal method, return true.\n\t// 3. Return false.\n\n\t// Polyfill.io - Only function objects have a [[Call]] internal method. This means we can simplify this function to check that the argument has a type of function.\n\treturn typeof argument === 'function';\n};","\n// Promise\n!function(n){function t(e){if(r[e])return r[e].exports;var o=r[e]={exports:{},id:e,loaded:!1};return n[e].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var r={};return t.m=n,t.c=r,t.p=\"\",t(0)}({0:/*!***********************!*\\\n  !*** ./src/global.js ***!\n  \\***********************/\nfunction(n,t,r){(function(n){var t=r(/*! ./yaku */80);try{(n||{}).Promise=t,window.Promise=t}catch(err){}}).call(t,function(){return this}())},80:/*!*********************!*\\\n  !*** ./src/yaku.js ***!\n  \\*********************/\nfunction(n,t){(function(t){!function(){\"use strict\";function r(){return un[B][G]||J}function e(n,t){for(var r in t)n[r]=t[r]}function o(n){return n&&\"object\"==typeof n}function i(n){return\"function\"==typeof n}function u(n,t){return n instanceof t}function c(n){return u(n,U)}function f(n,t,r){if(!t(n))throw v(r)}function s(){try{return C.apply(F,arguments)}catch(e){return rn.e=e,rn}}function a(n,t){return C=n,F=t,s}function l(n,t){function r(){for(var r=0;r<o;)t(e[r],e[r+1]),e[r++]=S,e[r++]=S;o=0,e.length>n&&(e.length=n)}var e=O(n),o=0;return function(n,t){e[o++]=n,e[o++]=t,2===o&&un.nextTick(r)}}function h(n,t){var r,e,o,c,f=0;if(!n)throw v(W);var s=n[un[B][D]];if(i(s))e=s.call(n);else{if(!i(n.next)){if(u(n,O)){for(r=n.length;f<r;)t(n[f],f++);return f}throw v(W)}e=n}for(;!(o=e.next()).done;)if(c=a(t)(o.value,f++),c===rn)throw i(e[K])&&e[K](),c.e;return f}function v(n){return new TypeError(n)}function _(n){return(n?\"\":X)+(new U).stack}function d(n,t){var r=\"on\"+n.toLowerCase(),e=H[r];I&&I.listeners(n).length?n===tn?I.emit(n,t._v,t):I.emit(n,t):e?e({reason:t._v,promise:t}):un[n](t._v,t)}function p(n){return n&&n._s}function w(n){if(p(n))return new n(en);var t,r,e;return t=new n(function(n,o){if(t)throw v();r=n,e=o}),f(r,i),f(e,i),t}function m(n,t){return function(r){A&&(n[Q]=_(!0)),t===q?T(n,r):k(n,t,r)}}function y(n,t,r,e){return i(r)&&(t._onFulfilled=r),i(e)&&(n[M]&&d(nn,n),t._onRejected=e),A&&(t._p=n),n[n._c++]=t,n._s!==z&&cn(n,t),t}function j(n){if(n._umark)return!0;n._umark=!0;for(var t,r=0,e=n._c;r<e;)if(t=n[r++],t._onRejected||j(t))return!0}function x(n,t){function r(n){return e.push(n.replace(/^\\s+|\\s+$/g,\"\"))}var e=[];return A&&(t[Q]&&r(t[Q]),function o(n){n&&N in n&&(o(n._next),r(n[N]+\"\"),o(n._p))}(t)),(n&&n.stack?n.stack:n)+(\"\\n\"+e.join(\"\\n\")).replace(on,\"\")}function g(n,t){return n(t)}function k(n,t,r){var e=0,o=n._c;if(n._s===z)for(n._s=t,n._v=r,t===$&&(A&&c(r)&&(r.longStack=x(r,n)),fn(n));e<o;)cn(n,n[e++]);return n}function T(n,t){if(t===n&&t)return k(n,$,v(Y)),n;if(t!==P&&(i(t)||o(t))){var r=a(b)(t);if(r===rn)return k(n,$,r.e),n;i(r)?(A&&p(t)&&(n._next=t),p(t)?R(n,t,r):un.nextTick(function(){R(n,t,r)})):k(n,q,t)}else k(n,q,t);return n}function b(n){return n.then}function R(n,t,r){var e=a(r,t)(function(r){t&&(t=P,T(n,r))},function(r){t&&(t=P,k(n,$,r))});e===rn&&t&&(k(n,$,e.e),t=P)}var S,C,F,P=null,E=\"object\"==typeof window,H=E?window:t,I=H.process,L=H.console,A=!1,O=Array,U=Error,$=1,q=2,z=3,B=\"Symbol\",D=\"iterator\",G=\"species\",J=B+\"(\"+G+\")\",K=\"return\",M=\"_uh\",N=\"_pt\",Q=\"_st\",V=\"Invalid this\",W=\"Invalid argument\",X=\"\\nFrom previous \",Y=\"Chaining cycle detected for promise\",Z=\"Uncaught (in promise)\",nn=\"rejectionHandled\",tn=\"unhandledRejection\",rn={e:P},en=function(){},on=/^.+\\/node_modules\\/yaku\\/.+\\n?/gm,un=n.exports=function(n){var t,r=this;if(!o(r)||r._s!==S)throw v(V);if(r._s=z,A&&(r[N]=_()),n!==en){if(!i(n))throw v(W);t=a(n)(m(r,q),m(r,$)),t===rn&&k(r,$,t.e)}};un[\"default\"]=un,e(un.prototype,{then:function(n,t){if(void 0===this._s)throw v();return y(this,w(un.speciesConstructor(this,un)),n,t)},\"catch\":function(n){return this.then(S,n)},\"finally\":function(n){function t(t){return un.resolve(n()).then(function(){return t})}return this.then(t,t)},_c:0,_p:P}),un.resolve=function(n){return p(n)?n:T(w(this),n)},un.reject=function(n){return k(w(this),$,n)},un.race=function(n){var t=this,r=w(t),e=function(n){k(r,q,n)},o=function(n){k(r,$,n)},i=a(h)(n,function(n){t.resolve(n).then(e,o)});return i===rn?t.reject(i.e):r},un.all=function(n){function t(n){k(o,$,n)}var r,e=this,o=w(e),i=[];return r=a(h)(n,function(n,u){e.resolve(n).then(function(n){i[u]=n,--r||k(o,q,i)},t)}),r===rn?e.reject(r.e):(r||k(o,q,[]),o)},un.Symbol=H[B]||{},a(function(){Object.defineProperty(un,r(),{get:function(){return this}})})(),un.speciesConstructor=function(n,t){var e=n.constructor;return e?e[r()]||t:t},un.unhandledRejection=function(n,t){L&&L.error(Z,A?t.longStack:x(n,t))},un.rejectionHandled=en,un.enableLongStackTrace=function(){A=!0},un.nextTick=E?function(n){setTimeout(n)}:I.nextTick,un._s=1;var cn=l(999,function(n,t){var r,e;return e=n._s!==$?t._onFulfilled:t._onRejected,e===S?void k(t,n._s,n._v):(r=a(g)(e,n._v),r===rn?void k(t,$,r.e):void T(t,r))}),fn=l(9,function(n){j(n)||(n[M]=1,d(tn,n))})}()}).call(t,function(){return this}())}});","\n// Array.prototype.includes\n// 22.1.3.11. Array.prototype.includes ( searchElement [ , fromIndex ] )\nCreateMethodProperty(Array.prototype, 'includes', function includes(searchElement /* [ , fromIndex ] */) {\n\t'use strict';\n\t// 1. Let O be ? ToObject(this value).\n\tvar O = ToObject(this);\n\t// 2. Let len be ? ToLength(? Get(O, \"length\")).\n\tvar len = ToLength(Get(O, \"length\"));\n\t// 3. If len is 0, return false.\n\tif (len === 0) {\n\t\treturn false;\n\t}\n\t// 4. Let n be ? ToInteger(fromIndex). (If fromIndex is undefined, this step produces the value 0.)\n\tvar n = ToInteger(arguments[1]);\n\t// 5. If n ≥ 0, then\n\tif (n >= 0) {\n\t\t// a. Let k be n.\n\t\tvar k = n;\n\t\t// 6. Else n < 0,\n\t} else {\n\t\t// a. Let k be len + n.\n\t\tk = len + n;\n\t\t// b. If k < 0, let k be 0.\n\t\tif (k < 0) {\n\t\t\tk = 0;\n\t\t}\n\t}\n\t// 7. Repeat, while k < len\n\twhile (k < len) {\n\t\t// a. Let elementK be the result of ? Get(O, ! ToString(k)).\n\t\tvar elementK = Get(O, ToString(k));\n\t\t// b. If SameValueZero(searchElement, elementK) is true, return true.\n\t\tif (SameValueZero(searchElement, elementK)) {\n\t\t\treturn true;\n\t\t}\n\t\t// c. Increase k by 1.\n\t\tk = k + 1;\n\t}\n\t// 8. Return false.\n\treturn false;\n});"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","sourceRoot":""}